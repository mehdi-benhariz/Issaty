import CoreGenerator from '../../base-core/generator.js';
import { WriteFileSection, WriteFileBlock } from '../../base/api.js';
import { GeneratorDefinition } from '../generator.js';
export declare function asWriteFilesSection<Data = GeneratorDefinition['writingTaskParam']['application']>(section: WriteFileSection<CoreGenerator, Data>): WriteFileSection<CoreGenerator, Data>;
export declare function asWriteFilesBlock<Data = GeneratorDefinition['writingTaskParam']['application']>(section: WriteFileBlock<CoreGenerator, Data>): WriteFileBlock<CoreGenerator, Data>;
export declare function asInitializingTask(task: (this: CoreGenerator, params: GeneratorDefinition['initializingTaskParam']) => void): (this: CoreGenerator, params: GeneratorDefinition['initializingTaskParam']) => void;
export declare function asPromptingTask(task: (this: CoreGenerator, params: GeneratorDefinition['promptingTaskParam']) => void): (this: CoreGenerator, params: GeneratorDefinition['promptingTaskParam']) => void;
export declare function asConfiguringTask(task: (this: CoreGenerator, params: GeneratorDefinition['configuringTaskParam']) => void): (this: CoreGenerator, params: GeneratorDefinition['configuringTaskParam']) => void;
export declare function asComposingTask(task: (this: CoreGenerator, params: GeneratorDefinition['composingTaskParam']) => void): (this: CoreGenerator, params: GeneratorDefinition['composingTaskParam']) => void;
export declare function asLoadingTask(task: (this: CoreGenerator, params: GeneratorDefinition['loadingTaskParam']) => void): (this: CoreGenerator, params: GeneratorDefinition['loadingTaskParam']) => void;
export declare function asPreparingTask(task: (this: CoreGenerator, params: GeneratorDefinition['preparingTaskParam']) => void): (this: CoreGenerator, params: GeneratorDefinition['preparingTaskParam']) => void;
export declare function asPostPreparingTask(task: (this: CoreGenerator, params: GeneratorDefinition['postPreparingTaskParam']) => void): (this: CoreGenerator, params: GeneratorDefinition['postPreparingTaskParam']) => void;
export declare function asPreparingEachEntityTask(task: (this: CoreGenerator, params: GeneratorDefinition['preparingEachEntityTaskParam']) => void): (this: CoreGenerator, params: GeneratorDefinition['preparingEachEntityTaskParam']) => void;
export declare function asPreparingEachEntityFieldTask(task: (this: CoreGenerator, params: GeneratorDefinition['preparingEachEntityFieldTaskParam']) => void): (this: CoreGenerator, params: GeneratorDefinition['preparingEachEntityFieldTaskParam']) => void;
export declare function asPreparingEachEntityRelationshipTask(task: (this: CoreGenerator, params: GeneratorDefinition['preparingEachEntityRelationshipTaskParam']) => void): (this: CoreGenerator, params: GeneratorDefinition['preparingEachEntityRelationshipTaskParam']) => void;
export declare function asPostPreparingEachEntityTask(task: (this: CoreGenerator, params: GeneratorDefinition['postPreparingEachEntityTaskParam']) => void): (this: CoreGenerator, params: GeneratorDefinition['postPreparingEachEntityTaskParam']) => void;
export declare function asDefaultTask(task: (this: CoreGenerator, params: GeneratorDefinition['defaultTaskParam']) => void): (this: CoreGenerator, params: GeneratorDefinition['defaultTaskParam']) => void;
export declare function asWritingTask(task: (this: CoreGenerator, params: GeneratorDefinition['writingTaskParam']) => void): (this: CoreGenerator, params: GeneratorDefinition['writingTaskParam']) => void;
export declare function asWritingEntitiesTask(task: (this: CoreGenerator, params: GeneratorDefinition['writingEntitiesTaskParam']) => void): (this: CoreGenerator, params: GeneratorDefinition['writingEntitiesTaskParam']) => void;
export declare function asPostWritingTask(task: (this: CoreGenerator, params: GeneratorDefinition['postWritingTaskParam']) => void): (this: CoreGenerator, params: GeneratorDefinition['postWritingTaskParam']) => void;
export declare function asPostWritingEntitiesTask(task: (this: CoreGenerator, params: GeneratorDefinition['postWritingEntitiesTaskParam']) => void): (this: CoreGenerator, params: GeneratorDefinition['postWritingEntitiesTaskParam']) => void;
export declare function asInstallTask(task: (this: CoreGenerator, params: GeneratorDefinition['installTaskParam']) => void): (this: CoreGenerator, params: GeneratorDefinition['installTaskParam']) => void;
export declare function asEndTask(task: (this: CoreGenerator, params: GeneratorDefinition['endTaskParam']) => void): (this: CoreGenerator, params: GeneratorDefinition['endTaskParam']) => void;
